[[{"l":"Introduction","p":["Welcome to the Fernweh documentation!! \uD83E\uDD73","Fernweh is a text based RPG made using MonoGame. It has advanced modding tools so the community can create custom content using lua. This documentation contains guides for writing those custom games/extensions.","If this is your first time, you can go through the docs in order to create your first simple project!"]}],[{"l":"Installation","p":["Add information how to install all required tools and dependencies to start making content"]}],[{"i":"create-indexjson","l":"Create index.json","p":["Before you can start programming, you need to create a workspace.","Create a folder for you mod and name it appropritaly (ex. \"TestMod\"). Inside you'll need to create a new file named index.json. For your mod to work, you'll need to fill this out with the correct data:"]},{"l":"id","p":["Will be used to reference the mod from inside lua (name)"]},{"l":"type","p":["Mods are catagorized as either a library or game. Game mods are what you select when you make a new game, they include a campaign you can play through. While library mods are simply tools you can use like for adding inventories or quests."]},{"l":"dependancies","p":["You can choose to use mod libraries in your mod to easily add content. Each library mod listed here will be loaded with your mod."]},{"l":"scripts","p":["This will list every lua script to be loaded in your mod."]}],[{"l":"Tiles","p":["In order to render anything on the map, you will need data about each world tile. For that, you will need a .tile file and at least one sprite for it.","Example grass sprite used for tile:"]},{"l":"Name","p":["Is used to identify the tile from .map files."]},{"l":"Frames","p":["framePaths will list each sprite in the animation from the root of the mod folder.","FPS can be set for if your using multiple frames, but is unused for a single frame."]},{"l":"Open Directions","p":["Allow leaving and entering only for certain directions.","To calculate how many open directions your tile will have, add up the numbers representing each direction you want to be passable.","Up = 1","Down = 2","Left = 4","Right = 8","For example all directions is 15, only left or right would be 12, and none would be 0."]}],[{"l":"Maps","p":["Maps are used to load a series of tiles. You can have many, and switch between them. For example you might have a world map, that connects to a dungeon map when you enter a crypt. Fernweh has world culling, so you can easily load maps containing more than a million tiles, just be aware you will get higher loading times for such large maps."]},{"l":"Name","p":["A way to reference the map from lua scripts."]},{"l":"Explorable","p":["Defines whether or not the world renderer will show a Fog of War for unexplored areas. Might be unchecked for towns, or for story related purposes."]},{"l":"Tile Positions","p":["A list of every single tile in the map... Hopefully this will be made easier for editing in the future \uD83D\uDE2C.","position- can be edited by changing the 0's, the first which is X and second Y","name- the name of the tile to be used","firstEnterState- the lua state to be called when you enter this tile from another (different)","enterState- the lua state to be called every time you enter this tile except the first","leaveState the lua state to be called every time you leave this tile except the last","lastLeaveState the lua state to be called when when you enter another tile from this one (different)","You can leave a state variable blank, then the game will ignore it."]},{"l":"Conclusion","p":["Now you should be able to load your mod into the game and create a new game on it. If you copied the code from our examples, youll see youself standing on a large map consisting of exactly one grass tile \uD83D\uDE1B.","Now it's time to start creating some lua scripts in order to add functionaility to these tiles and add an objective to your game!"]}],[{"l":"Intro to states"},{"l":"About","p":["States are written in lua. A state is atomic and is in charge of creating interactible content in the \"overworld\".","This means a state is in charge of:","state rendering (mainly in chat)","offering conditional actions (and action logic)","blocking user movement","Most logic is handled in the :Render callback."]},{"l":"Creating a new state","p":["In your lua file you can create a new state with the following syntax:"]}],[{"l":"Adding Dialogue Translations","p":["In order to show any text in the game, you will need a .lang file to be included. This will allow the game to fetch different text for different locales. An example .lang file would look like this:","You can have different tags like color=\\Orange\\/color, for example:","Learn more about using colours here!"]}],[{"l":"Basic Dialogue Example","p":["Now with a .lang file, we can use new functions like renderer:AddText() and renderer:AddAction(). Because we setup the grass tile in the map to call an \"enter_grass\" lua state, we can create that state to be called for when you enter the grass tile.","Remember to add your lua scripts to the index.json to be loaded!","The .lang file would look like this:"]}],[{"l":"Global Events","p":["The global event handler acts as an interface to subscribe to various events, like PreStateRender and PostStateRender. It is supplied as the global variable Global. Generally allowing to subscribe via a callback function. Below will be an example that shows how to subscribe to a callback. The other events can be seen by looking at the GlobalEventHandler documentation."]}],[{"l":"Advanced Examples","p":["Because we're using lua, we can take full advantage of all its features and create more advanced scenarios like a day-time cycle using simple functions. This example also shows usage for Global Events."]}],[{"i":"referencing-scriptscode-splitting","l":"Referencing Scripts/Code Splitting","p":["When creating content you will quickly notice that your files start getting quite large and hard to read. To aid you in writing clean and maintainable code we allow splitting code and import/export pieces."]},{"l":"Importing","p":["Importing allows to reference variables and functions exported by other classes or classes you dependent on. Do note that cyclic dependencies are not allowed. While its possible to import a script that hasn't been loaded or is loaded after the current script, this will lead to the import object to be empty until the other script is issued.","Import a file from same mod:","Import a file from another mod:","The return value alias module in the example is a Store Reader instance."]},{"i":"read-raw-types-eg-classes","l":"Read raw types (e.g. classes)","p":["To read a raw type for example a class use the :Get(name) method. While it is currently possible to also fetch functions this behaviour might be removed later on."]},{"l":"Read safe variables","p":["Variables are wrapped into an object to allow controlling their usage and behaviour."]},{"l":"Read functions"},{"l":"Exporting","p":["Exporting variables and functions allows other scripts and mods to access and use them."]},{"l":"Save variables","p":["To easily save variables into the gamesave you simply use CreateStoredVar","This will automatically save the variable content. Do be aware that the variable now only supports Tables and primitives!"]}],[{"i":"savingloading-data","l":"Saving/Loading Data"},{"l":"The save callback","p":["Besides the automatic variable saving mechanism introduced in ScriptReference its also possible to save data that is not stored in a variable. You may register one save callback per script! This can be achieved with the following code:"]},{"l":"The load callback","p":["The loadcallback is called in order of script execution AFTER all scripts have been executed! This allows to ensure that everything has been registered! You may register one load callback per script! Do not that the data value will be nil when no data has been saved previously!"]}],[{"l":"Create Ability"},{"l":"Description","p":["Creates an ability that can be equiped and used. This ability can change depending on context."]},{"l":"Example","p":["FriendlySingle","FriendlyGroup","EnemySingle","EnemyGroup","EnemyAll","All","None","Ice","Air","Ground","Thunder","Water","Fire"]},{"l":"Create Constant Ability","p":["Creates an ability that does the exact same thing each time. Used for situations, like reviving, or giving status effects."]},{"i":"example-1","l":"Example"}],[{"l":"Create Item"},{"l":"Description","p":["Creates and adds an item to the game"]},{"l":"Example"}],[{"l":"Create Party"},{"l":"Description","p":["Creates and adds a character to the players party"]},{"l":"Example"}],[{"l":"Create Participant"},{"l":"Description","p":["Creates a battle participent. This is used to create pre-defined entities, usually enemies."]},{"l":"Perameters","p":["name(string)"]},{"l":"Instantiate Properties","p":["builder(?)","abilityBuilder( AbilityBuilder)"]},{"l":"Example"}],[{"l":"Create Status Effect"},{"l":"Description","p":["Creates a status effect that can be applied to entities"]},{"l":"Perameters","p":["name(string)"]},{"l":"Instantiate Properties","p":["effectBuilder( LuaEffectBuilder)","target( IBattleParticipant)","props( PropsArray)"]},{"l":"Example"}],[{"l":"Coloring","p":["Colors are set in various places like translation text or as a background color. Each time this will be a string value."]},{"l":"Literals","p":["We support all XNA/Monogame colors as literals. It is important that to notice that the values are case sensitive! Of course you can also define your own color values."]},{"i":"rgb--rgba","l":"RGB / RGBA","p":["You can also use RGB values the syntaxt is the following:","The values may range from 0 to 255;","You can also use transparency with the following syntax:","Notice that we use rgba instead of rgb. The last parameter ranges from 0-1!"]}],[{"l":"Text Replacements","p":["Text replacements allow you to dynamically change and interact with text. You can switch out placeholders to create more dynamic text.","Imagine you have the following translation:","We now would like to exchange {name}. Replacement text is always surrounded by curly brackets! If you don't replace it it will remain in your text. Now in your state render method you can render your text:","As you can see the second parameter is a lua array with lua arrays. The first value in the inner array is the key to replace alias name in our case. The second value is what we would like to add in there. In this case we are replacing it with a plain string, but we could also put in another translation:","Now you can color the name in another translation and inject it into the first one. You can also add more by adding more elements:"]}],[{"l":"AbilityBuilder"},{"l":"Description","p":["Allows to build abilities that can be cast in battles."]},{"l":"Methods"},{"i":"onreceivedamagefunction","l":"OnReceiveDamage(function)"},{"l":"Description","p":["Is called when the player with the ability receives damage."]},{"l":"Properties","p":["function( ReceiveDamageFunction)"]},{"i":"returns","l":"Returns:","p":["AbilityBuilder"]},{"i":"ondealdamagefunction","l":"OnDealDamage(function)"},{"l":"Description","p":["Is called when the player with the ability deals damage."]},{"l":"Properties","p":["function( DealDamageFunction)"]},{"i":"returns","l":"Returns:","p":["AbilityBuilder"]},{"i":"ontargetwithspellfunction","l":"OnTargetWithSpell(function)"},{"l":"Description","p":["Is called when the player with the ability targets someone with any spell."]},{"l":"Properties","p":["function( TargetWithSpellFunction)"]},{"i":"returns","l":"Returns:","p":["AbilityBuilder"]},{"i":"ontargetedbyspellfunction","l":"OnTargetedBySpell(function)"},{"l":"Description","p":["Is called when the player with the ability is targeted by someone with any spell."]},{"l":"Properties","p":["function( TargetedBySpellFunction)"]},{"i":"returns","l":"Returns:","p":["AbilityBuilder"]},{"i":"oncalculatestatsfunction","l":"OnCalculateStats(function)"},{"l":"Description","p":["Is called when the stats of the player are calculated. This might be called frequently."]},{"l":"Properties","p":["function( CalculateStatsFunction)"]},{"i":"returns","l":"Returns:","p":["AbilityBuilder"]},{"i":"onnextturnfunction","l":"OnNextTurn(function)"},{"l":"Description","p":["Is called when next turn starts"]},{"l":"Properties","p":["function( NextTurnFunction)"]},{"i":"returns","l":"Returns:","p":["AbilityBuilder"]},{"i":"abilityonusefunction","l":"AbilityOnUse(function)"},{"l":"Description","p":["Is called when the ability used and handles the main part of your ability logic"]},{"l":"Properties","p":["function( UseFunction)"]},{"i":"returns","l":"Returns:","p":["AbilityBuilder"]},{"i":"abilitycanusefunction","l":"AbilityCanUse(function)"},{"l":"Description","p":["Helps to define if the ability currently can be cast or not. If not the ability will be hidden in the ability selection."]},{"l":"Properties","p":["function( CanUseFunction)"]},{"i":"returns","l":"Returns:","p":["AbilityBuilder"]},{"i":"onturnendfunction","l":"OnTurnEnd(function)"},{"l":"Description","p":["Is called when the turn ends"]},{"l":"Properties","p":["function( EndTurnFunction)"]},{"i":"returns","l":"Returns:","p":["AbilityBuilder"]},{"i":"categoryidcategoryid","l":"CategoryId(categoryId)"},{"l":"Description","p":["Defines the category the ability is grouped in menus. Defaults to ability if not set."]},{"l":"Properties","p":["categoryId (string) the category"]},{"i":"returns","l":"Returns:","p":["AbilityBuilder"]},{"i":"manacostcost","l":"ManaCost(cost)"},{"l":"Description","p":["Sets the amount of mana required to use the function."]},{"l":"Properties","p":["cost (int) must be >= 0"]},{"i":"returns","l":"Returns:","p":["AbilityBuilder"]},{"i":"targettypetype","l":"TargetType(type)"},{"l":"Description","p":["The target type. Values are:","0 = FriendlySingle","1 = FriendlyGroup","2 = EnemyGroup","3 = EnemySingle","4 = EnemyAll","5 = All"]},{"l":"Properties","p":["type (int) the target type"]},{"i":"returns","l":"Returns:","p":["AbilityBuilder"]},{"i":"allowdeadtargetsallow","l":"AllowDeadTargets(allow)"},{"l":"Description","p":["Used to define if this ability can target dead participants. If not set the ability will not allow targeting dead."]},{"l":"Properties","p":["allow(bool) allow to target dead participants"]},{"i":"returns","l":"Returns:","p":["AbilityBuilder"]},{"i":"allowlivingtargetsallow","l":"AllowLivingTargets(allow)"},{"l":"Description","p":["Used to define if this ability can target living participants. If not set the ability will allow targeting living."]},{"l":"Properties","p":["allow(bool) allow to target living participants"]},{"i":"returns","l":"Returns:","p":["AbilityBuilder"]},{"i":"build","l":"Build()"},{"l":"Description","p":["Builds the ability to a useable format."]},{"i":"returns","l":"Returns:","p":["IAbility"]}],[{"l":"AbilityConfigBuilder"}],[{"l":"GlobalEventHandler"},{"l":"Description","p":["Acts as an interface to subscribe to global events."]},{"l":"Methods"},{"i":"addonpreplayermovefunction","l":"AddOnPrePlayerMove(function)"},{"l":"Description","p":["Is called before the player is moved to the destination tile."]},{"l":"Properties","p":["function( PrePlayerMoveFunction)"]},{"i":"returns","l":"Returns:","p":["GlobalEventHandler"]},{"i":"addonprestatechangefunction","l":"AddOnPreStateChange(function)"},{"l":"Description","p":["Is called before a state change us invoked"]},{"l":"Properties","p":["function( PreStateChangeFunction)"]},{"i":"returns","l":"Returns:","p":["GlobalEventHandler"]},{"i":"addonprestaterenderfunction","l":"AddOnPreStateRender(function)"},{"l":"Description","p":["Is called before a state is rendered"]},{"l":"Properties","p":["function( PreStateRenderFunction)"]},{"i":"returns","l":"Returns:","p":["GlobalEventHandler"]},{"i":"addonpoststaterenderfunction","l":"AddOnPostStateRender(function)"},{"l":"Description","p":["Is called after a state is rendered"]},{"l":"Properties","p":["function( PostStateRenderFunction)"]},{"i":"returns","l":"Returns:","p":["GlobalEventHandler"]},{"i":"addonbattlespriteloadfunction","l":"AddOnBattleSpriteLoad(function)"},{"l":"Description","p":["Is called when battle sprites are to be loaded"]},{"l":"Properties","p":["function( PostStateRenderFunction)"]},{"i":"returns","l":"Returns:","p":["GlobalEventHandler"]}],[{"l":"LuaAbilityFactoryBuilder"}],[{"l":"LuaEffectBuilder"},{"l":"Description","p":["Allows to build status effects that can be inflicted in battles"]},{"l":"Methods"},{"i":"onreceivedamagefunction","l":"OnReceiveDamage(function)"},{"l":"Description","p":["Is called when the player with the status effect receives damage."]},{"l":"Properties","p":["function( ReceiveDamageFunction)"]},{"i":"returns","l":"Returns:","p":["LuaEffectBuilder"]},{"i":"ondealdamagefunction","l":"OnDealDamage(function)"},{"l":"Description","p":["Is called when the player with the status effect deals damage."]},{"l":"Properties","p":["function( DealDamageFunction)"]},{"i":"returns","l":"Returns:","p":["LuaEffectBuilder"]},{"i":"ontargetwithspellfunction","l":"OnTargetWithSpell(function)"},{"l":"Description","p":["Is called when the player with the status effect targets someone with any spell."]},{"l":"Properties","p":["function( TargetWithSpellFunction)"]},{"i":"returns","l":"Returns:","p":["LuaEffectBuilder"]},{"i":"ontargetedbyspellfunction","l":"OnTargetedBySpell(function)"},{"l":"Description","p":["Is called when the player with the status effect is targeted by someone with any spell."]},{"l":"Properties","p":["function( TargetedBySpellFunction)"]},{"i":"returns","l":"Returns:","p":["LuaEffectBuilder"]},{"i":"oncalculatestatsfunction","l":"OnCalculateStats(function)"},{"l":"Description","p":["Is called when the stats of the player are calculated. This might be called frequently."]},{"l":"Properties","p":["function( Stats)"]},{"i":"returns","l":"Returns:","p":["LuaEffectBuilder"]},{"i":"onnextturnfunction","l":"OnNextTurn(function)"},{"l":"Description","p":["Is called when next turn starts"]},{"l":"Properties","p":["function( NextTurnFunction)"]},{"i":"returns","l":"Returns:","p":["LuaEffectBuilder"]},{"i":"ontrycleansefunction","l":"OnTryCleanse(function)"},{"l":"Description","p":["Is called when the theres an attempt at cleansing the status effect"]},{"l":"Properties","p":["function( TryCleanseFunction)"]},{"i":"returns","l":"Returns:","p":["LuaEffectBuilder"]},{"i":"onturnendfunction","l":"OnTurnEnd(function)"},{"l":"Description","p":["Is called when the current turn ends"]},{"l":"Properties","p":["function( TurnEndFunction)"]},{"i":"returns","l":"Returns:","p":["LuaEffectBuilder"]},{"i":"build","l":"Build()"},{"l":"Description","p":["Builds the effect to a useable format"]},{"i":"returns","l":"Returns:","p":["IStatusEffect"]}],[{"l":"LuaEffectFactoryBuilder"}],[{"l":"LuaParticipantConfigBuilder"}],[{"l":"LuaParticipantFactoryBuilder"}],[{"l":"LuaStateBuilder"},{"l":"Description","p":["Can be used to create new states."]},{"l":"Methods"},{"i":"renderfunction","l":"Render(function)"},{"l":"Description","p":["Is called when the state should be rendered/loaded. Should be used to select text and supply actions."]},{"l":"Properties","p":["function( RenderFunction)"]},{"i":"returns","l":"Returns:","p":["LuaStateBuilder"]},{"i":"showexitshow","l":"ShowExit(show)"},{"l":"Description","p":["If set to true this will append an \"exit\" action at the end of the text body."]},{"l":"Properties","p":["show(boolean)"]},{"i":"returns","l":"Returns:","p":["LuaStateBuilder"]},{"i":"allowsaveallow","l":"AllowSave(allow)"},{"l":"Description","p":["If set to false this will prevent saving the state and fallback to last savable state on save. This might be useful for UI-States or state relying on non persistent data. Defaults to true."]},{"l":"Properties","p":["allow(boolean)"]},{"i":"returns","l":"Returns:","p":["LuaStateBuilder"]},{"i":"stickysticky","l":"Sticky(sticky)"},{"l":"Description","p":["If set to false this will prevent the chat from scrolling downwards automatically. Defaults to true."]},{"l":"Properties","p":["sticky(boolean)"]},{"i":"returns","l":"Returns:","p":["LuaStateBuilder"]},{"i":"clearscreenpostclear","l":"ClearScreenPost(clear)"},{"l":"Description","p":["If set to false this will preserve chat render content to the next state. Defaults to true."]},{"l":"Properties","p":["clear(boolean)"]},{"i":"returns","l":"Returns:","p":["LuaStateBuilder"]}],[{"l":"StateContext"}],[{"l":"StateRenderer"},{"l":"Description","p":["Is used to render to the scene"]},{"l":"Methods"},{"i":"setmodemode","l":"SetMode(mode)"},{"l":"Description","p":["Change render mode for the following render calls (AddText, AddAction). Not case sensitive. Defaults to typewriter on invalid data."]},{"l":"Properties","p":["mode(string) - either \"static\" or \"typewriter\""]},{"i":"returns","l":"Returns:","p":["StateRenderer"]},{"i":"addlabelx-y-key-replacements","l":"AddLabel(x, y, key, [replacements])"},{"l":"Description","p":["Adds a screen label. Will be cleared with text."]},{"l":"Properties","p":["x(number) - x coordinate inside game view relative to screen left.","y(number) - y coordinate inside game view relative to screen top (positive values downwards).","key(string) - text translation key","replacements- ( Replacements)"]},{"i":"returns","l":"Returns:","p":["StateRenderer"]},{"i":"addtextkey-replacements","l":"AddText(key, [replacements])"},{"l":"Description","p":["Add text to text view"]},{"l":"Properties","p":["key(string) - text translation key","replacements- ( Replacements)"]},{"i":"returns","l":"Returns:","p":["StateRenderer"]},{"i":"addactioncallback-key-replacements","l":"AddAction(callback, key, [replacements])"},{"l":"Description","p":["Add text to text view"]},{"l":"Properties","p":["callback(LuaFunction) - no param lua function that is invoked when the text is clicked","key(string) - text translation key","replacements- ( Replacements)"]},{"i":"returns","l":"Returns:","p":["StateRenderer"]},{"i":"setbackgroundcolorcolor","l":"SetBackgroundColor(color)"},{"l":"Description","p":["Sets the background color for the current"]},{"l":"Properties","p":["color( Color)"]},{"i":"returns","l":"Returns:","p":["StateRenderer"]}],[{"l":"Stats"},{"l":"Description","p":["A way to access an entities stats and edit them if needed"]},{"l":"New Stats I Purpose","p":["accurasy, evasion, combat initiative","armor","athletism, lifting","Battle","charisma","constitution","dexterity","dmg till you die","effects certain magic attacks","effects certain magic attacks (think bard, or dancer)","endurance, torture","health","how much spells you can cast","intellect","magic attack and curse resistance","mana","Name","perception, survival, common sense","physical and sickness resistance","physical attack strength","physical resistance","problem-solving, trivia","shop prices, negotiations/persuasions, intimidation and deception","stealth, accuracy","strength","wisdom","World"]},{"i":"player-stats-test-to-see-progression","l":"Player Stats (Test to see progression)","p":["1","10","100","102","11","12","127","13","14","16","166","17","178","19","21","217","221","23","24","25","28","283","3","32","36","38","39","40","47","50","52","520","56","6","61","7","73","78","89","93","95","999","Cha","Con","Dex","HP","Int","MP","Stat","Wis","XP for level up","xp from same stats enemy (12.83)","xp from test enemy (7.6)","xp from tougher enemy (16)"]},{"l":"Enemy Stats","p":["12","10","8","5","4","7"]},{"l":"Battle Sim at Lvl. 1"},{"l":"Player","p":["23 HP","15 dmg","10 dmg if enemy had 5 armor","18 dmg","13 dmg w/ 0% peircing while enemy had 5 armor","15 dmg w/ 50% peircing while enemy has 5 armor","takes 1-2 attacks to kill enemy","earns 3xp per enemy killed (1-6, for 3-18)","15 xp required to level up. 6 of these enemies have to be killed. at low level, youll get always get about the same xp"]},{"l":"Enemy","p":["15 HP","11 base dmg agains player","takes 3 attacks to kill player"]},{"l":"Battle Sim at Lvl. 25"},{"i":"player-1","l":"Player","p":["102 HP","39 dmg","29 dmg if enemy had 10 armor","48 dmg","38 dmg w/ 0% peircing while enemy had 10 armor","43 dmg w/ 50% peircing while enemy has 10 armor","takes 2-3 attacks to kill enemy","earns 6xp per enemy killed (1-6, for 6-36)","88 xp required to level up. 16 of these enemies have to be killed. this is a weaker creature, so low xp. a stronger creature could yeild 9-12 xp at this level"]},{"i":"enemy-1","l":"Enemy","p":["82 HP","21 base dmg agains player","takes 5 attacks to kill player"]},{"l":"Calculations","p":["health = 0.75 * level^ 1.3 + con + 5","mana = wis * 0.4 + 10","stats = (0.47 (stat / 20)) * level^ 1.35 + stat","damage = str/int + weaponDMG - (enemyCon / 5 + enemyArmor(1 - weaponPeircing / 100))","if stats are too slow to increase at low levels (1-5), i found a way to change that, but i think itll be good slower (which is moving the whole graph to the left and readjusting for values)","xp is earned per character, so each character will get different amounts of xp, and no xp will be split/shared","xp needed = 0.0895 (level + 5) + 12.8","xp earned = 0.15 (level (enemyAveStats/playerAveStats))^ 1.2 + 3 + bonusXP","if leveling is too slow, should be able to raise the 0.15 to be a tad higher. bonusXP would be used for bosses or special enemies","And also, the formulas always give decimal values, so we will round to the smallest whole number in the game.","Site and project i used to calculate this stuff. Can easily change values and see results there:","stats - https://www.desmos.com/calculator/iiwdktkqlw","leveling - https://www.desmos.com/calculator/sni0gj2hax"]}],[{"l":"StoreReader"}],[{"l":"StoreWriter"}],[{"l":"Battle sprite load"}],[{"l":"Calculate Stats Function"},{"l":"Description","p":["Is called when the stats of a participant is calculated. This method is invoked frequently!"]},{"l":"Parameters","p":["stats(Stats)"]}],[{"l":"Data load Function"},{"l":"Description","p":["Is called after all scripts have been executed in script execution order. Value is nil if no data has been saved with the save function."]},{"l":"Parameters","p":["data(LuaTable | primitive | nil)"]}],[{"l":"Data Save Function"},{"l":"Description","p":["Is called to save data. Return value will be stored under namespace"]},{"l":"Return","p":["The data to save. THis must not include anything but tables and primitives"]}],[{"l":"PostRenderState"},{"l":"Description","p":["Runs after a state is rendered and allows to append the normal state render."]},{"l":"Parameters","p":["renderer( StateRenderer)","context( StateContext)"]}],[{"l":"Pre player move"}],[{"l":"PreRenderState"},{"l":"Description","p":["Runs before a state is rendered and allows to prepend the normal state render."]},{"l":"Parameters","p":["renderer( StateRenderer)","context( StateContext)"]}],[{"l":"RenderState"},{"l":"Description","p":["Renders a state"]},{"l":"Parameters","p":["renderer( StateRenderer)","context( StateContext)"]}],[{"l":"Library Mods","p":["Fernweh takes advantage of using various library mods to help build up the functionailty of the game. We've released numerous basic libraries you can use for your custom games. Your free to edit, copy and use them in any way you wish \uD83D\uDE04"]}],[{"l":"UI Compatibility","p":["Adds utility methods to e.g. prevent UI's picking up other UI's on their \"Back\" method."]},{"l":"Variables"},{"l":"OldState"},{"l":"Description","p":["Last non UI state"]},{"l":"Methods"},{"i":"blackliststatestate","l":"BlackListState(state)"},{"l":"Description","p":["puts a string on the ui list"]},{"i":"isuistate","l":"IsUI(state)"},{"l":"Description","p":["checks if a string is on the ui list"]}],[{"l":"Inventory Core","p":["Adds intentory management to the game. Includes a way to bring up a menu to use your items."]},{"l":"Dependencies","p":["UI Compat"]},{"l":"Methods"},{"i":"additemitem","l":"AddItem(item)"},{"l":"Description","p":["Add an item to player inventory"]},{"i":"getinventory","l":"GetInventory()"},{"l":"Description","p":["Get list of held items"]},{"i":"registeritemitem","l":"RegisterItem(item)"},{"l":"Description","p":["Add item to item registry"]},{"i":"getitemitem","l":"GetItem(item)"},{"l":"Description","p":["Get item data from item registry"]}],[{"l":"Character System"},{"l":"Dependencies","p":["Inventory Core","UI Compat"]},{"l":"Methods"},{"i":"registercharactertypetype-factory","l":"RegisterCharacterType(type, factory)"},{"i":"loadcharactertypetype-id-data","l":"LoadCharacterType(type, id, data)"},{"i":"addtopartycharacter","l":"AddToParty(character)"},{"l":"Description","p":["Adds character to party if they arent already and if theres enough room"]},{"i":"isinpartycharacter","l":"IsInParty(character)"},{"l":"Description","p":["Returns true if specified character is in party"]},{"i":"removefrompartycharacter","l":"RemoveFromParty(character)"},{"l":"Description","p":["Remove character from party"]}],[{"l":"Core Mod","p":["Core game data. Includes simple data for the game like abilities, effects, party members, sprites and lua states. Other mods can use this to easily get going with creating content."]},{"l":"Dependencies","p":["Character System","Inventory Core","UI Compat"]}],[{"l":"Essentials","p":["Includes essential files, like lang files and certain sprites."]}],[{"l":"Shops","p":["Adds ability to create a \"shop\", where you can buy and sell items for currency."]},{"l":"Methods"},{"i":"openshopcontext-settings","l":"OpenShop(context, settings)"},{"l":"Description","p":["Opens the shop menu"]},{"i":"getmoney","l":"GetMoney()"},{"l":"Description","p":["Gets current amount of money"]},{"i":"setmoneybalance","l":"SetMoney(balance)"},{"l":"Description","p":["Set your current amount of money"]},{"i":"hasmoneybalance","l":"HasMoney(balance)"},{"l":"Description","p":["Checks if you have over the specified amount of money"]},{"i":"purchasebalance","l":"Purchase(balance)"},{"l":"Description","p":["Removes a certain amount of money"]}],[{"l":"Game Mods","p":["These tend to be mods that bring everything together to make an adventure for you, rather than one off features."]}],[{"l":"Frostglade Tundra","p":["Small finished (well not yet \uD83D\uDE09) game to show off the idea of Ferweh and what its potential is."]},{"l":"Dependencies","p":["Core","Character System","Inventory Core"]}],[{"l":"Abilities"}],[{"l":"Characters"},{"i":"gardain---fighter","l":"Gardain - Fighter"},{"l":"Stats","p":["Health - 13","Mana - 6","Strength - 17","Intellect - 13","Agility - 10","Defense - 16","Spirit - 12","Evasion - 12"]},{"l":"Abilities","p":["Alert - reduces chance of ambushes"]},{"l":"Items","p":["Copper Halberd","Leather Armor","Leather Boots"]},{"i":"olma---paladin","l":"Olma - Paladin"},{"l":"Stats","p":["Health - 13","Mana - 6","Strength - 15","Intellect - 9","Agility - 12","Defense - 16","Spirit - 11","Evasion - 14"]},{"l":"Abilities","p":["Guard - protects other character","Battle Cry - slightly boosts atk. and def. stats of party"]},{"l":"Items","p":["Copper Long Sword","Wooden Sheild","Leather Armor","Leather Boots"]},{"i":"luneiros---ranger","l":"Luneiros - Ranger"},{"l":"Stats","p":["Health - 12","Mana - 2","Strength - 8","Intellect - 10","Agility - 17","Defense - 14","Spirit - 9","Evasion - 16"]},{"l":"Abilities","p":["Reach - same dmg. boost as front row from back","Sharpen Reflex - increases characters evasion"]},{"l":"Items","p":["Wooden Long Bow","20x Stone Arrows","Leather Armor","Leather Sandals"]},{"i":"malark---rogue","l":"Malark - Rogue"},{"l":"Stats","p":["Health - 10","Mana - 3","Strength - 11","Intellect - 9","Agility - 16","Defense - 14","Spirit - 9","Evasion - 15"]},{"l":"Abilities","p":["Steal - chance to steal item from enemy","Light Foot - increase chance of first strikes"]},{"l":"Items","p":["Copper Shortsword","Copper Dagger","Cloth Clothing","Leather Boots"]},{"i":"sanih---red-mage","l":"Sanih - Red Mage"},{"l":"Stats","p":["Health - 8","Mana - 14","Strength - 12","Intellect - 16","Agility - 12","Defense - 11","Spirit - 15","Evasion - 11"]},{"l":"Abilities","p":["Fire - causes fire elemental damage","Heal - restore some of characters health"]},{"l":"Items","p":["Wood Staff","Copper Knife","Cloth Clothing","Leather Boots"]},{"i":"fasan---mage","l":"Fasan - Mage"},{"l":"Stats","p":["Health - 10","Mana - 15","Strength - 11","Intellect - 16","Agility - 13","Defense - 10","Spirit - 15","Evasion - 11"]},{"l":"Abilities","p":["Blind - causes blindness. reduces accuracy for physical attacks","Blizzard - causes ice elemental damage","Fire - causes fire elemental damage"]},{"l":"Items","p":["Wood Staff","Copper Knife","Cloth Clothing","Leather Sandals"]}],[{"l":"Enemies"},{"i":"beasts-tundra","l":"Beasts, Tundra"},{"l":"Gaint Weasel"},{"l":"Stats","p":["Health - 10","Mana - 0","Strength - 10","Intellect - 9","Agility - 13","Defense - 13","Spirit - 10","Evasion - 14"]},{"l":"Abilities","p":["Slash - use claws to attack. weak against armor","Burrow - burrows into a small hole protecting them for the turn"]},{"l":"Wolf"},{"l":"Stats","p":["Health - 12","Mana - 0","Strength - 13","Intellect - 10","Agility - 12","Defense - 15","Spirit - 12","Evasion - 12"]},{"l":"Abilities","p":["Howl - increases party members strength and agility","Slash - use claws to attack. weak against armor","Bite - use fangs to attack through armor, less chance to hit"]},{"l":"Dire Wolf"},{"l":"Stats","p":["Health - 15","Mana - 0","Strength - 16","Intellect - 10","Agility - 11","Defense - 16","Spirit - 12","Evasion - 10"]},{"l":"Abilities","p":["Howl - increases party members strength and agility","Slash - use claws to attack. weak against armor","Bite - use fangs to attack through armor, less chance to hit","Lounge - throws whole body onto target with a chance to paralyze them"]},{"l":"Polar Bear"},{"l":"Stats","p":["Health - 14","Mana - 0","Strength - 15","Intellect - 10","Agility - 9","Defense - 16","Spirit - 11","Evasion - 10"]},{"l":"Abilities","p":["Slash - use claws to attack. weak against armor","Bite - use fangs to attack through armor, less chance to hit","Lounge - throws whole body onto target with a chance to paralyze them"]},{"i":"humanoids-stone-axe-horde","l":"Humanoids, Stone Axe Horde"},{"l":"Kobold"},{"l":"Stats","p":["Health - 10","Mana - 2","Strength - 8","Intellect - 10","Agility - 17","Defense - 14","Spirit - 9","Evasion - 16"]},{"l":"Abilities","p":["Sharpen Reflex - increases characters evasion"]},{"l":"Goblin"},{"l":"Stats","p":["Health - 8","Mana - 3","Strength - 11","Intellect - 9","Agility - 16","Defense - 14","Spirit - 9","Evasion - 15"]},{"l":"Abilities","p":["Steal - chance to steal item from enemy"]},{"l":"Ogre"},{"l":"Stats","p":["Health - 12","Mana - 6","Strength - 17","Intellect - 13","Agility - 10","Defense - 16","Spirit - 12","Evasion - 12"]},{"l":"Abilities","p":["Battle Cry - slightly boosts atk. and def. stats of party"]},{"i":"humanoids-bulls-gang","l":"Humanoids, Bulls Gang"},{"l":"Bandit"},{"l":"Stats","p":["Health - 8","Mana - 3","Strength - 11","Intellect - 9","Agility - 16","Defense - 14","Spirit - 9","Evasion - 15"]},{"l":"Abilities","p":["Steal - chance to steal item from enemy","Light Foot - increase chance of first strikes"]},{"i":"humanoids-fist-of-law","l":"Humanoids, Fist of Law"},{"l":"Guard"},{"l":"Stats","p":["Health - 10","Mana - 6","Strength - 15","Intellect - 9","Agility - 12","Defense - 16","Spirit - 11","Evasion - 14"]},{"l":"Abilities","p":["Guard - protects other character","Battle Cry - slightly boosts atk. and def. stats of party"]}],[{"l":"Items"}]]